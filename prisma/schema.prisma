// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RentStatusEnum {
  Placed
  Accepted
  Rejected
  During
  Completed
  Canceled
}

enum UnitTypeEnum {
  Metric
  Imperial
}

enum FuelTypeEnum {
  Gas
  Diesel
  Electric
  Hybrid
}

model Rental {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  name String @db.VarChar(40)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  unitType UnitType @relation(fields: [unitTypeId], references: [id])
  unitTypeId Int
  managers RentalManager[]
  vehicles Vehicle[]
}

model RentalManager {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  name String @db.VarChar(50)
  email String @db.VarChar(254)
  password String
  active Boolean @default(false)
  activationToken String @db.Text
  activationTokenExpiration DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rental Rental @relation(fields: [rentalId], references: [id])
  rentalId Int
}

model UnitType {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  name UnitTypeEnum
  rentals Rental[]
}

model FuelType {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  name FuelTypeEnum
  vehicles Vehicle[]
}

model Vehicle {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  brand String @db.VarChar(30)
  model String @db.VarChar(50)
  year Int
  description String
  mileage Int
  licensePlate String @db.VarChar(20)
  pricePerDay Decimal @db.Decimal
  name String @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fuelType FuelType @relation(fields: [fuelTypeId], references: [id])
  fuelTypeId Int
  rental Rental @relation(fields: [rentalId], references: [id])
  rentalId Int
  vehicleEquipment VehicleEquipment[]
  vehicleServices VehicleService[]
  vehiclePhotos VehiclePhoto[]
  rents Rent[]
}

model VehicleEquipment {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  name String @db.VarChar(100)
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int
}

model VehicleService {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  startAt DateTime
  endAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int
}

model VehiclePhoto {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  url String
  main Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int
}

model Rent {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  notes String
  status RentStatusEnum
  startAt DateTime
  endAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId Int
  customer Customer @relation(fields: [customerId], references: [id])
  customerId Int @unique
}

model Customer {
  id Int @id @default(autoincrement())
  uuid String @default(uuid()) @db.Uuid @unique
  firstName String @db.VarChar(30)
  lastName String @db.VarChar(50)
  birthDate DateTime @db.Date
  email String @db.VarChar(254)
  phoneNumber String @db.VarChar(30)
  createdAt DateTime @default(now())
  rent Rent?
}